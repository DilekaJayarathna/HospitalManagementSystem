/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.HMS;

import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author Dileka
 */
public class PaymentDetails extends javax.swing.JInternalFrame {
    UserAdmin useradmin;
    DefaultListModel listModel = new DefaultListModel();
    /**
     * Creates new form PaymentDetails
     */
    public PaymentDetails() {
        initComponents();
        AddListPatientID();
    }
    
    //Add patient ids of employees to list from patient table 
     public void AddListPatientID(){
        try{
            Statement st=database.getStatement();
            ResultSet rs=st.executeQuery("SELECT PatientID FROM Patient");
            
            
            while (rs.next()) {
                String s=rs.getString("PatientID");
                
                listModel.addElement(s);
            }
            
            listPatient.setModel(listModel);
        }
        catch(Exception e){
            e.printStackTrace();
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel11 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        txtDocCharge = new javax.swing.JTextField();
        txtServiceCharge = new javax.swing.JTextField();
        txtTotalCharge = new javax.swing.JTextField();
        btnCancel = new javax.swing.JButton();
        btnCalculate = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        listPatient = new javax.swing.JList<>();
        jLabel7 = new javax.swing.JLabel();
        txtTestCharge = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtPatientID = new javax.swing.JTextField();
        btnUpdate = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(244, 244, 254));
        setClosable(true);
        setIconifiable(true);
        setPreferredSize(new java.awt.Dimension(720, 510));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel11.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 20)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(0, 102, 102));
        jLabel11.setText("Payment Details");
        getContentPane().add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 10, 260, -1));

        jLabel1.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jLabel1.setText("Doctor Charge");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 130, 100, 20));

        jLabel2.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jLabel2.setText("Medicine & Service Charge");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 170, 170, 20));

        jLabel3.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jLabel3.setText("Enter Patient ID");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 50, -1, 30));

        jLabel6.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jLabel6.setText("Total Charge");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 270, 100, 20));

        txtSearch.setEditable(false);
        txtSearch.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        getContentPane().add(txtSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 80, 90, 30));

        btnSearch.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/HMS/Search-icon.png"))); // NOI18N
        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });
        getContentPane().add(btnSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 80, 100, -1));

        txtDocCharge.setEditable(false);
        txtDocCharge.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        getContentPane().add(txtDocCharge, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 130, 200, -1));

        txtServiceCharge.setEditable(false);
        txtServiceCharge.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        getContentPane().add(txtServiceCharge, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 170, 200, -1));

        txtTotalCharge.setEditable(false);
        txtTotalCharge.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txtTotalCharge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTotalChargeActionPerformed(evt);
            }
        });
        getContentPane().add(txtTotalCharge, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 270, 200, -1));

        btnCancel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/HMS/symbol-delete-icon.png"))); // NOI18N
        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });
        getContentPane().add(btnCancel, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 440, -1, -1));

        btnCalculate.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnCalculate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/HMS/process-icon.png"))); // NOI18N
        btnCalculate.setText("Calculate");
        btnCalculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalculateActionPerformed(evt);
            }
        });
        getContentPane().add(btnCalculate, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 310, -1, -1));

        listPatient.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        listPatient.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listPatientValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(listPatient);

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 120, 90, 290));

        jLabel7.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jLabel7.setText("Test Charge");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 210, 100, 20));

        txtTestCharge.setEditable(false);
        txtTestCharge.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        getContentPane().add(txtTestCharge, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 210, 200, -1));

        jLabel8.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jLabel8.setText("Patient ID");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 90, -1, -1));

        txtPatientID.setEditable(false);
        txtPatientID.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        getContentPane().add(txtPatientID, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 90, 200, -1));

        btnUpdate.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/HMS/update-icon.png"))); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        getContentPane().add(btnUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 440, -1, -1));

        btnAdd.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/HMS/Add-icon.png"))); // NOI18N
        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        getContentPane().add(btnAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 440, 90, -1));

        jLabel13.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jLabel13.setText("Rs.");
        getContentPane().add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 270, 20, 20));

        jLabel14.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jLabel14.setText("Rs.");
        getContentPane().add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 210, 20, 20));

        jLabel15.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jLabel15.setText("Rs.");
        getContentPane().add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 170, 20, 20));

        jLabel16.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jLabel16.setText("Rs.");
        getContentPane().add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 130, 20, 20));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtTotalChargeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTotalChargeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTotalChargeActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        int x = JOptionPane.showConfirmDialog(null, "Are you sure you want to exit?");
        if(x == 0){
            this.dispose();
        }
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        
        //Search database which match the entered patient id
        try{
            
            Statement st=database.getStatement();
            ResultSet rs=st.executeQuery("SELECT TotalCharge FROM Payment WHERE PatientId='"+txtSearch.getText()+"'");
            
                 
            while(rs.next()){
                
                txtTotalCharge.setText(rs.getString("TotalCharge"));
                
            }
        }
        catch(Exception ex){
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        
        //Checking data fields of the jinternalform whether there are null values before update
        if(txtPatientID.getText().equals("")){
            JOptionPane.showMessageDialog(null,"Patient Id can not be EMPTY!","Invalid Input!",JOptionPane.ERROR_MESSAGE);
        }
        else if(txtDocCharge.getText().equals("")){
            JOptionPane.showMessageDialog(null,"Charge of doctor can not be EMPTY!","Invalid Input!",JOptionPane.ERROR_MESSAGE);
        }
        else if(txtServiceCharge.getText().equals("")){
            JOptionPane.showMessageDialog(null,"Charge of medicine & services can not be EMPTY!","Invalid Input!",JOptionPane.ERROR_MESSAGE);
        }
        else if(txtTestCharge.getText().equals("")){
            JOptionPane.showMessageDialog(null,"Charge of tests can not be EMPTY!","Invalid Input!",JOptionPane.ERROR_MESSAGE);
        }
        
        else if(txtTotalCharge.getText().equals("")){
            JOptionPane.showMessageDialog(null,"Total of Charges can not be EMPTY!","Invalid Input!",JOptionPane.ERROR_MESSAGE);
        }
        
        else{
            int x = JOptionPane.showConfirmDialog(null, "Are you sure you want to update this record?");
            if(x == 0){
            
            try{  
                Statement stat=database.getStatement();
            
                //Check whether there are duplicate patient ids
                ResultSet rs=stat.executeQuery("SELECT PatientID FROM Payment WHERE PatientID='"+txtPatientID.getText()+"'");
           
                if(rs.next()==true){
                    JOptionPane.showMessageDialog(null,"Entered Patient ID already EXISTS!","Invalid Input!",JOptionPane.ERROR_MESSAGE);
                }
       
                else{
                     //Update table with changed values
                    stat.executeUpdate("UPDATE Payment SET PatientID='"+txtPatientID.getText()+"', DoctorCharge='"+txtDocCharge.getText()+"', ServiceCharge='"+txtServiceCharge.getText()+"', TestCharge='"+txtTestCharge.getText()+"',TotalCharge='"+txtTotalCharge.getText()+"' WHERE PatientId='"+txtPatientID.getText()+"'");
                    JOptionPane.showMessageDialog(null,"Data updated successfully!");
                    
                    //Empty the fields in jinternalform that entered 
                    txtPatientID.setText("");
                    txtDocCharge.setText("");
                    txtServiceCharge.setText("");
                    txtTestCharge.setText("");
                    txtTotalCharge.setText("");
                    
                }
            }
            catch(Exception e){
                e.printStackTrace();
            }
            }
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnCalculateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalculateActionPerformed
        
        //Checking data fields of the jinternalform whether there are null values before calculate
        if(txtPatientID.getText().equals("")){
            JOptionPane.showMessageDialog(null,"Patient Id can not be EMPTY!","Invalid Input!",JOptionPane.ERROR_MESSAGE);
        }
        else if(txtDocCharge.getText().equals("")){
            JOptionPane.showMessageDialog(null,"Charge of doctor can not be EMPTY!","Invalid Input!",JOptionPane.ERROR_MESSAGE);
        }
        else if(txtServiceCharge.getText().equals("")){
            JOptionPane.showMessageDialog(null,"Charge of services can not be EMPTY!","Invalid Input!",JOptionPane.ERROR_MESSAGE);
        }
        else if(txtTestCharge.getText().equals("")){
            JOptionPane.showMessageDialog(null,"Charge of tests can not be EMPTY!","Invalid Input!",JOptionPane.ERROR_MESSAGE);
        }
        else{
            //Calculate the total charge of patient
            double docCharge=Double.parseDouble(txtDocCharge.getText());
            double serviceCharge=Double.parseDouble(txtServiceCharge.getText());
            double testCharge=Double.parseDouble(txtTestCharge.getText());
            double totalCharge=docCharge+serviceCharge+testCharge;
            
            txtTotalCharge.setText(Double.toString(totalCharge));
        }
    }//GEN-LAST:event_btnCalculateActionPerformed

    private void listPatientValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listPatientValueChanged
        
        //Set fields to selected values 
        String selected = listPatient.getSelectedValue().toString();
        txtSearch.setText(selected); 
        txtPatientID.setText(selected);
        try{
            Statement st=database.getStatement();
            
            ResultSet rs2=st.executeQuery("SELECT Ward.DoctorCharge,Ward.ServiceCharge FROM Ward INNER JOIN Patient ON Ward.WardNo=Patient.WardNo AND Patient.PatientID='"+txtSearch.getText()+"'");
            while (rs2.next()) {
                txtDocCharge.setText(rs2.getString("DoctorCharge"));
                txtServiceCharge.setText(rs2.getString("ServiceCharge"));
            }
            
            ResultSet rs3=st.executeQuery("SELECT TestCharge FROM TestsResults WHERE PatientID='"+txtSearch.getText()+"'");
            while (rs3.next()) {
                txtTestCharge.setText(rs3.getString("TestCharge"));
            }
            txtTotalCharge.setText("");
        }
        catch(Exception e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_listPatientValueChanged

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        
        //Checking data fields of the jinternalform whether there are null values before insert
        if(txtPatientID.getText().equals("")){
            JOptionPane.showMessageDialog(null,"Patient Id can not be EMPTY!","Invalid Input!",JOptionPane.ERROR_MESSAGE);
        }
        else if(txtDocCharge.getText().equals("")){
            JOptionPane.showMessageDialog(null,"Charge of doctor can not be EMPTY!","Invalid Input!",JOptionPane.ERROR_MESSAGE);
        }
        else if(txtServiceCharge.getText().equals("")){
            JOptionPane.showMessageDialog(null,"Charge of medicine & services can not be EMPTY!","Invalid Input!",JOptionPane.ERROR_MESSAGE);
        }
        else if(txtTestCharge.getText().equals("")){
            JOptionPane.showMessageDialog(null,"Charge of tests can not be EMPTY!","Invalid Input!",JOptionPane.ERROR_MESSAGE);
        }
        
        else if(txtTotalCharge.getText().equals("")){
            JOptionPane.showMessageDialog(null,"Total of Charges can not be EMPTY!","Invalid Input!",JOptionPane.ERROR_MESSAGE);
        }
        
        else{
        
            try{  
                Statement stat=database.getStatement();
            
                //Check whether there are duplicate patient ids
                ResultSet rs=stat.executeQuery("SELECT PatientID FROM Payment WHERE PatientID='"+txtPatientID.getText()+"'");
           
                if(rs.next()==true){
                    JOptionPane.showMessageDialog(null,"Entered Patient ID already EXISTS!","Invalid Input!",JOptionPane.ERROR_MESSAGE);
                }
        
        
                else{
            
                    //Insert data into payment table
                    stat.executeUpdate("INSERT INTO Payment(PatientID,DoctorCharge,ServiceCharge,TestCharge,TotalCharge) VALUES('"+txtPatientID.getText()+"','"+txtDocCharge.getText()+"','"+txtServiceCharge.getText()+"','"+txtTestCharge.getText()+"','"+txtTotalCharge.getText()+"')");
                    
                    JOptionPane.showMessageDialog(null,"Data added successfully!");
                    
                    //Empty the fields in jinternalform that entered 
                    txtPatientID.setText("");
                    txtDocCharge.setText("");
                    txtServiceCharge.setText("");
                    txtTestCharge.setText("");
                    txtTotalCharge.setText("");
        
                    
                }
            }
            catch(Exception e){
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_btnAddActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnCalculate;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JList<String> listPatient;
    private javax.swing.JTextField txtDocCharge;
    private javax.swing.JTextField txtPatientID;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtServiceCharge;
    private javax.swing.JTextField txtTestCharge;
    private javax.swing.JTextField txtTotalCharge;
    // End of variables declaration//GEN-END:variables
}
